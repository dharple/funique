#!/usr/bin/php
<?php
/**
 * Given two directories, find what files are unique to one or the other
 * directory.
 *
 * Used to see what files have been removed (as opposed to simply being moved)
 * between two backups.
 *
 * Compares file contents.
 */

ini_set('memory_limit', '1G');

require_once dirname(__DIR__) . '/vendor/autoload.php';

if ($argc < 3 || !is_dir($argv[1]) || !is_dir($argv[2])) {
	fprintf(STDERR, "Usage:\n\t" . basename($argv[0]) . " DIR DIR\n");
	exit(-1);
}

$sleepTime = 100000; // be nice

$dirs = [
	new \Funique\Directory($argv[1]),
	new \Funique\Directory($argv[2])
];

$files = [];
$sizeGroups = [];

foreach ($dirs as $which => $dir) {
	$files[$which] = $dir->getAllFiles();
	$sizeGroups = array_merge($sizeGroups, array_keys($files[$which]));
}

$sizeGroups = array_unique($sizeGroups, SORT_NUMERIC);

foreach ($sizeGroups as $sizeGroup)
{
	$filesA = $files[0][$sizeGroup];
	$filesB = $files[1][$sizeGroup];

	foreach ($filesA as $fileA) {
		foreach ($filesB as $fileB) {
			if ($fileA->isUnique() === false && $fileB->isUnique() === false) {
				continue;
			}

			if ($fileA->getSize() == $fileB->getSize()) {
				if ($fileA->getSum() == $fileB->getSum()) {
					$fileA->isUnique(false);
					$fileB->isUnique(false);
				}
				// sleep; that operation was expensive
				usleep($sleepTime);
			}
		}
	}

	foreach ($filesA as $fileA) {
		if ($fileA->isUnique()) {
			print($fileA->getPath() . "\n");
		}
	}

	foreach ($filesB as $fileB) {
		if ($fileB->isUnique()) {
			print($fileB->getPath() . "\n");
		}
	}

}

// vim: ai:cin
